https://www.cnblogs.com/zeenzhou/p/13255484.html

一，讲一下线程参数的含义？
答：https://blog.csdn.net/hlp4207/article/details/99630377

二，mysql索引实现，为什么是B+树？说一下B树和B+树的区别？

三，Redis的使用，分布式锁的实现？
    a：加锁
    public class RedisTool {

    private static final String LOCK_SUCCESS = "OK";
    private static final String SET_IF_NOT_EXIST = "NX";
    private static final String SET_WITH_EXPIRE_TIME = "PX";

    /**
     * 尝试获取分布式锁
     * @param jedis Redis客户端
     * @param lockKey 锁
     * @param requestId 请求标识
     * @param expireTime 超期时间
     * @return 是否获取成功
     */
    public static boolean tryGetDistributedLock(Jedis jedis, String lockKey, String requestId, int expireTime) {

        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);

        if (LOCK_SUCCESS.equals(result)) {
            return true;
        }
        return false;

    }
    第一个为key，我们使用key来当锁，因为key是唯一的。

    第二个为value，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。

    第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；

    第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。

    第五个为time，与第四个参数相呼应，代表key的过期时间。


    b:解锁
    public class RedisTool {

    private static final Long RELEASE_SUCCESS = 1L;

    /**
     * 释放分布式锁
     * @param jedis Redis客户端
     * @param lockKey 锁
     * @param requestId 请求标识
     * @return 是否释放成功
     */
    public static boolean releaseDistributedLock(Jedis jedis, String lockKey, String requestId) {

        String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";
        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));

        if (RELEASE_SUCCESS.equals(result)) {
            return true;
        }
        return false;

    }

四，TCP三次握手
    第一次握手，客户端给服务器发送一个SYN段(在 TCP 标头中 SYN 位字段为 1 的 TCP/IP 数据包), 该段中也包含客户端的初始序列号(Sequence number = J)
    第二次握手，服务器返回客户端 SYN +ACK 段(在 TCP 标头中SYN和ACK位字段都为 1 的 TCP/IP 数据包)， 该段中包含服务器的初始序列号(Sequence number = K)；同时使 Acknowledgment number = J + 1来表示确认已收到客户端的 SYN段(Sequence number = J)
    第三次握手，客户端给服务器响应一个ACK段(在 TCP 标头中 ACK 位字段为 1 的 TCP/IP 数据包), 该段中使 Acknowledgment number = K + 1来表示确认已收到服务器的 SYN段(Sequence number = K)。

五，volatile关键字的作用
    a：保持内存可见性
        Java通过几种原子操作完成工作内存和主内存的交互：
            lock：作用于主内存，把变量标识为线程独占状态。
            unlock：作用于主内存，解除独占状态。
            read：作用主内存，把一个变量的值从主内存传输到线程的工作内存。
            load：作用于工作内存，把read操作传过来的变量值放入工作内存的变量副本中。
            use：作用工作内存，把工作内存当中的一个变量值传给执行引擎。
            assign：作用工作内存，把一个从执行引擎接收到的值赋值给工作内存的变量。
            store：作用于工作内存的变量，把工作内存的一个变量的值传送到主内存中。
            write：作用于主内存的变量，把store操作传来的变量的值放入主内存的变量中。
        volatile的特殊规则就是：
            read、load、use动作必须连续出现。
            assign、store、write动作必须连续出现。
        所以，使用volatile变量能够保证:
            每次读取前必须先从主内存刷新最新的值。
            每次写入后必须立即同步回主内存当中。
    b: 防止指令重排序
    https://www.cnblogs.com/monkeysayhi/p/7654460.html

六，乐观锁、悲观锁
    悲观锁：
        共享锁【shared locks】又称为读锁：针对于select操作。
        排他锁【exclusive locks】又称为写锁：针对于update操作。
        缺点：
            “先取锁再访问”的保守策略
            在效率方面，处理加锁的机制会让数据库产生额外的开销
            增加产生死锁的机会
            还会降低并行性
    乐观所：
        CAS：
        ABA问题：

七，HashMap结构，是否线程安全？ConcurrentHashMap如何保证线程安全？说一下HashMap的实现，扩容机制，扩容时如何保证可操作？

八，之前用过哪些设计模式？

九，算法题：滑动窗口

十，Redis扩容机制（渐进式单线程扩容）

十一，Spring AOP原理

十二，Spring IoC的原理，如何实现，如何解决循环依赖？

十三，synchronize底层实现，如何实现Lock？

十四，AQS有什么特点？

十五，介绍各种网络协议。

DNS在网络层用哪个协议，为什么。
介绍HTTPS协议，详述SSL建立连接过程。
代码题：反转单链表。
代码题：复杂链表复制。
代码题：数组a,先单调地址再单调递减，输出数组中不同元素个数。要求：O(1)空间复杂度，不能改变原数组


说一下Java垃圾回收机制
64匹马，8个赛道，找最快的4匹马。
64匹马，8个赛道，找最快的8匹马。
给出两个升序数组A、B和长度m、n，求第k个大的数
给出数组A，长度为n，数组中元素的值位于[0, n - 1]之间，求是否有重复元素

讲一下多线程与多进程区别
JVM中什么时候会进行垃圾回收？什么样的对象是可以回收的？
Spring主要思想是什么？

你未来的发展方向是什么？确定了么？打算一直做Java？有考虑过转吗？

那你平时是怎么学习Java的呢？

分享最近看的一本书

场景题目：设计一个短域名服务：短信存不了太长网站，需要弄成短域名，你该如何设计一个服务，可以为全国的网址服务。

TCP为什么是三次握手四次挥手？

数据库的隔离级别

sql题，写了个连表查询外加模糊查询

算法：镜像二叉树














